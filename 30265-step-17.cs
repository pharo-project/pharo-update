'From Pharo3.0 of 18 March 2013 [Latest update: #30248] on 4 July 2013 at 1:07:12 pm'!Trait named: #TBehavior	uses: TPureBehavior	category: 'Traits-Kernel-Traits'!!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:02'!users	^self explicitRequirement.! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 10:53'!classesComposedWithMe	self isTrait 		ifTrue: [ ^self users gather: [:u | u classesComposedWithMe]]		ifFalse: [ ^{self} ].! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:07'!users: aCollection	^self explicitRequirement.! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/3/2013 22:31'!hasTraitComposition	^ self traitComposition notEmpty.! !!TBehavior methodsFor: 'initialize-release' stamp: 'SebastianTleye 7/4/2013 11:27'!initialize	"moved here from the class side's #new"	super initialize.	self superclass: Object.	"no longer sending any messages, some of them crash the VM"	self methodDict: self emptyMethodDictionary.	self setFormat: Object format.	self traitComposition: nil.	self users: IdentitySet new.! !!TBehavior methodsFor: 'private' stamp: 'SebastianTleye 7/4/2013 11:22'!setFormat: aFormatInstanceDescription	^self explicitRequirement.! !!TBehavior methodsFor: 'accessing class hierarchy' stamp: 'SebastianTleye 7/4/2013 11:18'!superclass: aClass	^self explicitRequirement.! !!TBehavior methodsFor: 'accessing class hierarchy' stamp: 'SebastianTleye 7/4/2013 11:18'!superclass	^self explicitRequirement.! !!TBehavior methodsFor: 'accessing' stamp: 'SebastianTleye 7/3/2013 22:48'!poolDictionaryNames	^ self sharedPools collect: [:ea | self environment keyAtIdentityValue: ea]! !!TBehavior methodsFor: 'accessing' stamp: 'SebastianTleye 7/4/2013 10:37'!classPool	^ Dictionary new! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:02'!users	^self explicitRequirement.! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 10:53'!classesComposedWithMe	self isTrait 		ifTrue: [ ^self users gather: [:u | u classesComposedWithMe]]		ifFalse: [ ^{self} ].! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:07'!users: aCollection	^self explicitRequirement.! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/3/2013 22:31'!hasTraitComposition	^ self traitComposition notEmpty.! !!TBehavior methodsFor: 'initialize-release' stamp: 'SebastianTleye 7/4/2013 11:27'!initialize	"moved here from the class side's #new"	super initialize.	self superclass: Object.	"no longer sending any messages, some of them crash the VM"	self methodDict: self emptyMethodDictionary.	self setFormat: Object format.	self traitComposition: nil.	self users: IdentitySet new.! !!TBehavior methodsFor: 'private' stamp: 'SebastianTleye 7/4/2013 11:22'!setFormat: aFormatInstanceDescription	^self explicitRequirement.! !!TBehavior methodsFor: 'accessing class hierarchy' stamp: 'SebastianTleye 7/4/2013 11:18'!superclass: aClass	^self explicitRequirement.! !!TBehavior methodsFor: 'accessing class hierarchy' stamp: 'SebastianTleye 7/4/2013 11:18'!superclass	^self explicitRequirement.! !!TBehavior methodsFor: 'accessing' stamp: 'SebastianTleye 7/3/2013 22:48'!poolDictionaryNames	^ self sharedPools collect: [:ea | self environment keyAtIdentityValue: ea]! !!TBehavior methodsFor: 'accessing' stamp: 'SebastianTleye 7/4/2013 10:37'!classPool	^ Dictionary new! !!TraitBehavior methodsFor: 'testing' stamp: 'SebastianTleye 7/3/2013 22:40'!instSize	^0! !!TraitBehavior methodsFor: 'private' stamp: 'SebastianTleye 7/4/2013 11:21'!setFormat: aFormatInstanceDescription	"Compatibility purposes"! !!TraitBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:07'!users: aCollection	users := aCollection.! !!TraitBehavior methodsFor: 'accessing class hierarchy' stamp: 'SebastianTleye 7/4/2013 11:17'!superclass: aClass 	"Compatibility purposes"! !!TraitBehavior methodsFor: 'testing' stamp: 'SebastianTleye 7/3/2013 22:40'!instSize	^0! !!TraitBehavior methodsFor: 'private' stamp: 'SebastianTleye 7/4/2013 11:21'!setFormat: aFormatInstanceDescription	"Compatibility purposes"! !!TraitBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:07'!users: aCollection	users := aCollection.! !!TraitBehavior methodsFor: 'accessing class hierarchy' stamp: 'SebastianTleye 7/4/2013 11:17'!superclass: aClass 	"Compatibility purposes"! !!Behavior methodsFor: 'testing' stamp: 'SebastianTleye 7/4/2013 13:06'!isBehavior	"Return true if the receiver is a behavior"	^true! !!Behavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:37'!traitComposition: aTraitComposition	"Compatibility purposes"! !!Behavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:04'!users	"Compatibility purposes"	^IdentitySet new.! !!Behavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:06'!users: aCollection	"Compatibility purposes"! !!Behavior methodsFor: 'testing' stamp: 'SebastianTleye 7/4/2013 13:06'!isBehavior	"Return true if the receiver is a behavior"	^true! !!Behavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:37'!traitComposition: aTraitComposition	"Compatibility purposes"! !!Behavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:04'!users	"Compatibility purposes"	^IdentitySet new.! !!Behavior methodsFor: 'traits' stamp: 'SebastianTleye 7/4/2013 11:06'!users: aCollection	"Compatibility purposes"! !Behavior removeSelector: #classesComposedWithMe!Behavior removeSelector: #hasTraitComposition!Behavior removeSelector: #poolDictionaryNames!!Behavior reorganize!(#'memory usage' instancesSizeInMemory)(#testing isObsolete isBytes instSize isAnonymous isBits hasAbstractMethods isWeak isCompact canZapMethodDictionary isPointers shouldNotBeRedefined isMeta isWords isVariable isBehavior sourceMatchesBytecodeAt: instSpec isFixed)(#'adding/removing methods' addSelectorSilently:withMethod: removeSelector: methodDictAddSelectorSilently:withMethod: adoptInstance: addSelector:withMethod:notifying: addSelector:withMethod: basicAddSelector:withMethod: localSelectors removeSelectorSilently:)(#'user interface' withAllSubAndSuperclassesDo: unreferencedInstanceVariables)(#'*System-Support' allCallsOn allUnsentMessages allCallsOnIn: referencedClasses allCallsOn:)(#'*ast-core' parseTreeFor:)(#'*NativeBoost-Core' nbBindingOf: externalTypeAlias: nbFnArgument:generator:)(#private setFormat: basicRemoveSelector: checkCanBeUncompact becomeUncompact becomeCompactSimplyAt: becomeCompact indexIfCompact spaceUsed flushCache)(#'testing class hierarchy' kindOfSubclass includesBehavior: inheritsFrom:)(#'*Rpackage-Core' originalName)(#copying deepCopy copyOfMethodDictionary postCopy)(#'*Tools-Inspector' inspectAllInstances inspectSubInstances)(#'obsolete subclasses' allLocalCallsOn: basicObsoleteSubclasses addObsoleteSubclass: removeAllObsoleteSubclasses removeObsoleteSubclass: obsoleteSubclasses)(#cleanup cleanUp cleanUp:)(#printing storeLiteral:on: printHierarchy literalScannedAs:notifying: longPrintOn: printOn:)(#compiling instVarNamesAndOffsetsDo: variablesAndOffsetsDo:)(#'instance creation' new: basicNew: basicNew new)(#naming environment)(#'*Nautilus' realClass)(#'*Manifest-Core' isManifest)(#'system startup' shutDown: shutDown startUp startUp:)(#queries whichSelectorsAssign: whichClassDefinesClassVar: whichClassDefinesInstVar: whichSuperclassSatisfies: copiesFromSuperclass: whichSelectorsRead: copiedFromSuperclass: copiesMethodsFromSuperclass copiedMethodsFromSuperclass)(#'initialize-release' initialize nonObsoleteClass superclass:methodDictionary:format:)(#'*Ring-Core-Kernel' protocols methodNamed: methodsInProtocol:)(#accessing isComposedBy: name format poolDictionaryNames numberOfInstanceVariables typeOfClass methodDict classDepth classPool subclassDefinerClass)(#'accessing instances and variables' allInstVarNames includesSharedPoolNamed: allClassVarNames classVarNames instVarNames instanceCount allSharedPools allowsSubInstVars allSubInstances allInstances sharedPools subclassInstVarNames someInstance)(#'*Fuel' fuelNew fuelNew: fuelIgnoredInstanceVariableNames)(#enumerating allSubInstancesDo: subclassesDo: selectSubclasses: withAllSuperAndSubclassesDo: allSubclassesDo: withAllSuperclassesDo: allInstancesDo: allSuperclassesDo: selectSuperclasses: allUnreferencedInstanceVariables)(#'accessing class hierarchy' allSubclasses superclass: withAllSubclasses subclasses withAllSuperclasses allSuperclassesIncluding: withAllSubclassesDo: superclass allSubclassesWithLevelDo:startingLevel: allSuperclasses)(#traits addTraitSelector:withMethod: traits flattenDownAllTraits traitComposition: users flattenDown: classesComposedWithMe traitsProvidingSelector: users: traitOrClassOfSelector: notifyUsersOfChangedSelector: updateMethodDictionarySelector: removeUser: traitCompositionIncludes: purgeLocalSelectors noteChangedSelectors: traitComposition setTraitCompositionFrom: traitTransformations removeFromComposition: traitCompositionString removeTraitSelector: setTraitComposition: notifyUsersOfChangedSelectors: hasTraitComposition ensureLocalSelectors applyChangesOfNewTraitCompositionReplacing: addUser: addToComposition: addExclusionOf:to: removeAlias:of:)(#initialization emptyMethodDictionary obsolete)(#'accessing method dictionary' allMethods compiledMethodAt:ifAbsent: selectors deregisterLocalSelector: methodDict: compress methodDictionary allSelectorsBelow: sourceCodeAt: allSelectorsAboveUntil: registerLocalSelector: basicLocalSelectors >> lookupSelector: nextQuotePosIn:startingFrom: allSelectorsAbove selectorsWithArgs: methodDictionary: supermostPrecodeCommentFor: basicLocalSelectors: changeRecordsAt: methods sourceCodeAt:ifAbsent: selectorsAndMethodsDo: firstCommentAt: zapAllMethods allSelectorsWithout: compiledMethodAt: classAndMethodFor:do:ifAbsent: firstPrecodeCommentFor: precodeCommentOrInheritedCommentFor: commentsAt: commentsIn: selectorsDo: methodsDo: ultimateSourceCodeAt:ifAbsent: allSelectors)(#'testing method dictionary' thoroughHasSelectorReferringTo:special:byte: isLocalAliasSelector: classBindingOf: canUnderstand: includesLocalSelector: whichSelectorsReferTo:special:byte: isDisabledSelector: thoroughWhichSelectorsReferTo:special:byte: whichSelectorsStoreInto: hasMethods canPerform: whichSelectorsAccess: whichSelectorsReferTo: whichClassIncludesSelector: isAliasSelector: includesSelector:)(#'*Compiler-Kernel' decompilerClass recompile: parserClass compile: bindingOf: compile:classified:notifying:trailer:ifFail: compiler defaultMethodTrailer evaluatorClass compile:notifying: compileAll compileAllFrom: evaluate: compilerClass recompile:from: sourceCodeTemplate recompileChanges binding)!TraitBehavior removeSelector: #canUnderstand:!TraitBehavior removeSelector: #classAndMethodFor:do:ifAbsent:!TraitBehavior removeSelector: #classPool!TraitBehavior removeSelector: #classVarNames!TraitBehavior removeSelector: #classesComposedWithMe!TraitBehavior removeSelector: #hasTraitComposition!TraitBehavior removeSelector: #includesBehavior:!TraitBehavior removeSelector: #inheritsFrom:!TraitBehavior removeSelector: #initialize!TraitBehavior removeSelector: #instVarNames!TraitBehavior removeSelector: #isComposedBy:!TraitBehavior removeSelector: #lookupSelector:!TraitBehavior removeSelector: #poolDictionaryNames!TraitBehavior removeSelector: #precodeCommentOrInheritedCommentFor:!TraitBehavior removeSelector: #selectorsWithArgs:!!TraitBehavior reorganize!(#ambiguous compiledMethodAt:ifAbsent: traitCompositionString addSelector:withMethod: compileAll withAllSuperclasses methodDictAddSelectorSilently:withMethod: recompile: methodDictionary changeRecordsAt: updateMethodDictionarySelector: protocols obsolete allSelectors traitTransformations compileAllFrom: addExclusionOf:to: compile: ensureLocalSelectors compilerClass compiledMethodAt: environment firstPrecodeCommentFor: deepCopy selectorsAndMethodsDo: traitOrClassOfSelector: selectors removeFromComposition: removeAlias:of: notifyUsersOfChangedSelectors: literalScannedAs:notifying: traits compress compile:notifying: canZapMethodDictionary postCopy binding sourceCodeTemplate flattenDown: compile:classified:notifying:trailer:ifFail: copyOfMethodDictionary setTraitCompositionFrom: sourceCodeAt:ifAbsent: thoroughHasSelectorReferringTo:special:byte: evaluatorClass traitsProvidingSelector: localSelectors evaluate: registerLocalSelector: isLocalAliasSelector: selectorsDo: methodNamed: removeTraitSelector: lookupSelector: addToComposition: includesLocalSelector: firstCommentAt: isAliasSelector: >> emptyMethodDictionary storeLiteral:on: isDisabledSelector: recompileChanges includesSelector: defaultMethodTrailer sourceCodeAt: methods deregisterLocalSelector: methodsInProtocol: whichSelectorsReferTo: methodsDo: purgeLocalSelectors parserClass flattenDownAllTraits longPrintOn: spaceUsed noteChangedSelectors: removeSelectorSilently: decompilerClass applyChangesOfNewTraitCompositionReplacing: hasMethods compiler originalName whichSelectorsReferTo:special:byte: setTraitComposition: notifyUsersOfChangedSelector: methodDictionary: traitCompositionIncludes: addSelector:withMethod:notifying:)(#'user interface' withAllSubAndSuperclassesDo: unreferencedInstanceVariables)(#'accessing method dictionary' removeSelector: supermostPrecodeCommentFor: classAndMethodFor:do:ifAbsent: methodDict: zapAllMethods allSelectorsAbove precodeCommentOrInheritedCommentFor: methodDict basicLocalSelectors nextQuotePosIn:startingFrom: addSelectorSilently:withMethod: selectorsWithArgs: allSelectorsWithout: allMethods allSelectorsAboveUntil: ultimateSourceCodeAt:ifAbsent: commentsIn: allSelectorsBelow: commentsAt: basicLocalSelectors:)(#cleanup cleanUp cleanUp:)(#'*Compiler-Kernel' recompile:from: bindingOf:)(#'testing class hierarchy' kindOfSubclass inheritsFrom:)(#copying)(#'system startup' shutDown: shutDown startUp: startUp)(#'memory usage' instancesSizeInMemory)(#'*Tools-Browser' browse)(#'instance creation' new: basicNew: basicNew new)(#'*Rpackage-Core')(#'class compatibility' subclassDefinerClass)(#'obsolete subclasses' removeAllObsoleteSubclasses removeObsoleteSubclass: addObsoleteSubclass: allLocalCallsOn: obsoleteSubclasses)(#initialization)(#queries copiedFromSuperclass: copiedMethodsFromSuperclass whichClassDefinesInstVar: whichSuperclassSatisfies: copiesFromSuperclass: whichSelectorsRead: copiesMethodsFromSuperclass whichSelectorsAssign: whichClassDefinesClassVar:)(#testing isObsolete includesBehavior: isBytes instSize isTrait isAnonymous isBits hasAbstractMethods isWeak isCompact isPointers shouldNotBeRedefined isWords isMeta isVariable isFixed sourceMatchesBytecodeAt: instSpec)(#'testing method dictionary' whichClassIncludesSelector: canPerform: classBindingOf: whichSelectorsAccess: whichSelectorsStoreInto: canUnderstand: thoroughWhichSelectorsReferTo:special:byte:)(#private becomeUncompact checkCanBeUncompact flushCache becomeCompactSimplyAt: becomeCompact indexIfCompact setFormat:)(#compiling instVarNamesAndOffsetsDo: variablesAndOffsetsDo:)(#'accessing instances and variables' allInstVarNames includesSharedPoolNamed: allClassVarNames classVarNames instVarNames instanceCount allSharedPools allowsSubInstVars allSubInstances allInstances sharedPools subclassInstVarNames someInstance)(#traits hasTraitComposition addUser: classesComposedWithMe removeUser: traitComposition users: users addTraitSelector:withMethod: traitComposition:)(#'initialize-release' initialize nonObsoleteClass superclass:methodDictionary:format:)(#printing printHierarchy printOn:)(#'adding/removing methods' basicAddSelector:withMethod: pureAddSelectorSilently:withMethod: pureRemoveSelector: adoptInstance: basicRemoveSelector:)(#'accessing class hierarchy' allSubclasses superclass: withAllSubclasses subclasses superclass withAllSubclassesDo: allSuperclassesIncluding: allSubclassesWithLevelDo:startingLevel: allSuperclasses)(#naming name)(#accessing isComposedBy: classDepth poolDictionaryNames typeOfClass numberOfInstanceVariables classPool)(#enumerating allUnreferencedInstanceVariables subclassesDo: selectSubclasses: withAllSuperAndSubclassesDo: allSubclassesDo: withAllSuperclassesDo: allSubInstancesDo: allSuperclassesDo: selectSuperclasses: allInstancesDo:)!TBehavior removeSelector: #canUnderstand:!TBehavior removeSelector: #isBehavior!TPureBehavior removeSelector: #hasTraitComposition!TClass removeSelector: #hasTraitComposition!TClass removeSelector: #poolDictionaryNames!