'From Pharo3.0 of 18 March 2013 [Latest update: #30248] on 4 July 2013 at 10:31:34 am'!Trait named: #TClassDescription	uses: TClassAndTraitDescription	category: 'Traits-Kernel-Traits'!!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/3/2013 21:36'!addUser: aClassOrTrait	self users add: aClassOrTrait.! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/3/2013 21:32'!removeUser: aClassOrTrait	self users remove: aClassOrTrait ifAbsent: []! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/3/2013 21:36'!addUser: aClassOrTrait	self users add: aClassOrTrait.! !!TBehavior methodsFor: 'traits' stamp: 'SebastianTleye 7/3/2013 21:32'!removeUser: aClassOrTrait	self users remove: aClassOrTrait ifAbsent: []! !!TraitBehavior methodsFor: 'compatibility' stamp: 'SebastianTleye 7/3/2013 19:12'!superclass	"For compatibility with classes"	^ nil! !!TraitBehavior methodsFor: 'compatibility' stamp: 'SebastianTleye 7/3/2013 19:12'!subclasses	"for compatibility with classes"		^ #()! !!TraitBehavior methodsFor: 'testing' stamp: 'SebastianTleye 7/3/2013 18:40'!isTrait	^true! !!TraitBehavior methodsFor: 'compatibility' stamp: 'SebastianTleye 7/3/2013 19:12'!superclass	"For compatibility with classes"	^ nil! !!TraitBehavior methodsFor: 'compatibility' stamp: 'SebastianTleye 7/3/2013 19:12'!subclasses	"for compatibility with classes"		^ #()! !!TraitBehavior methodsFor: 'testing' stamp: 'SebastianTleye 7/3/2013 18:40'!isTrait	^true! !!TraitDescription methodsFor: 'compatibility' stamp: 'SebastianTleye 7/3/2013 19:27'!instanceVariables	^#().! !!TraitDescription methodsFor: 'copying' stamp: 'SebastianTleye 7/3/2013 18:37'!copyTraitExpression	"When recursively copying a trait expression, the primitive traits should NOT be copiedbecause they are globally named 'well-known' objects"	^ self ! !!TraitDescription methodsFor: 'compatibility' stamp: 'SebastianTleye 7/3/2013 19:27'!instanceVariables	^#().! !!TraitDescription methodsFor: 'copying' stamp: 'SebastianTleye 7/3/2013 18:37'!copyTraitExpression	"When recursively copying a trait expression, the primitive traits should NOT be copiedbecause they are globally named 'well-known' objects"	^ self ! !Trait removeSelector: #subclasses!Trait removeSelector: #superclass!TraitDescription removeSelector: #acceptsLoggingOfCompilation!TraitDescription removeSelector: #addCategory:before:!TraitDescription removeSelector: #addSelector:withMethod:notifying:!TraitDescription removeSelector: #addSelectorSilently:withMethod:!TraitDescription removeSelector: #applyChangesOfNewTraitCompositionReplacing:!TraitDescription removeSelector: #classComment:!TraitDescription removeSelector: #classComment:stamp:!TraitDescription removeSelector: #comment!TraitDescription removeSelector: #comment:!TraitDescription removeSelector: #comment:stamp:!TraitDescription removeSelector: #commentStamp:!TraitDescription removeSelector: #commentStamp:prior:!TraitDescription removeSelector: #compile:classified:!TraitDescription removeSelector: #compile:classified:notifying:!TraitDescription removeSelector: #compile:classified:withStamp:notifying:!TraitDescription removeSelector: #compile:classified:withStamp:notifying:logSource:!TraitDescription removeSelector: #compile:notifying:!TraitDescription removeSelector: #compileSilently:!TraitDescription removeSelector: #compileSilently:classified:!TraitDescription removeSelector: #compileSilently:classified:notifying:!TraitDescription removeSelector: #copy:from:!TraitDescription removeSelector: #copy:from:classified:!TraitDescription removeSelector: #copyAll:from:!TraitDescription removeSelector: #copyAll:from:classified:!TraitDescription removeSelector: #copyAllCategoriesFrom:!TraitDescription removeSelector: #copyCategory:from:!TraitDescription removeSelector: #copyCategory:from:classified:!TraitDescription removeSelector: #copyMethodDictionaryFrom:!TraitDescription removeSelector: #correspondingForTest!TraitDescription removeSelector: #definition!TraitDescription removeSelector: #doneCompiling!TraitDescription removeSelector: #duringTestCompileSilently:!TraitDescription removeSelector: #duringTestCompileSilently:classified:!TraitDescription removeSelector: #errorCategoryName!TraitDescription removeSelector: #fileOutCategory:!TraitDescription removeSelector: #fileOutCategory:on:moveSource:toFile:!TraitDescription removeSelector: #fileOutChangedMessages:on:!TraitDescription removeSelector: #fileOutChangedMessages:on:moveSource:toFile:!TraitDescription removeSelector: #fileOutMethod:!TraitDescription removeSelector: #fileOutMethod:on:!TraitDescription removeSelector: #fileOutOn:!TraitDescription removeSelector: #fileOutOn:moveSource:toFile:!TraitDescription removeSelector: #fileOutOrganizationOn:!TraitDescription removeSelector: #hasComment!TraitDescription removeSelector: #isClassSide!TraitDescription removeSelector: #isInstanceSide!TraitDescription removeSelector: #isMeta!TraitDescription removeSelector: #linesOfCode!TraitDescription removeSelector: #localMethods!TraitDescription removeSelector: #logMethodSource:forMethod:inCategory:withStamp:!TraitDescription removeSelector: #methodsFor:!TraitDescription removeSelector: #methodsInCategory:!TraitDescription removeSelector: #moveChangesTo:!TraitDescription removeSelector: #noteAddedSelector:meta:!TraitDescription removeSelector: #noteCompilationOf:meta:!TraitDescription removeSelector: #noteMethodAdded:!TraitDescription removeSelector: #noteMethodChanged:to:!TraitDescription removeSelector: #noteMethodRemoved:!TraitDescription removeSelector: #noteRecategorizedSelector:from:to:!TraitDescription removeSelector: #noteRecategorizedSelectors:oldComposition:!TraitDescription removeSelector: #printCategoryChunk:on:withStamp:priorMethod:!TraitDescription removeSelector: #printMethodChunk:withPreamble:on:moveSource:toFile:!TraitDescription removeSelector: #printOn:!TraitDescription removeSelector: #putClassCommentToCondensedChangesFile:!TraitDescription removeSelector: #reformatAll!TraitDescription removeSelector: #removeCategory:!TraitDescription removeSelector: #reorganize!TraitDescription removeSelector: #selectorsToFileOutCategory:!TraitDescription removeSelector: #storeOn:!TraitDescription removeSelector: #subclasses!TraitDescription removeSelector: #subject!TraitDescription removeSelector: #trait!TraitDescription removeSelector: #uncategorizedMethods!TraitDescription removeSelector: #updateOrganizationDescription:oldCategory:newCategory:changed:!TraitDescription removeSelector: #wantsChangeSetLogging!TraitDescription removeSelector: #wantsRecompilationProgressReported!TraitDescription removeSelector: #whichCategoryIncludesSelector:!TraitDescription removeSelector: #zapOrganization!!TraitDescription reorganize!(#'accessing class hierarchy' commentInventory subclasses classesThatImplementAllOf: printSubclassesOn:level: subclassesDo:)(#'organization updating' applyChangesOfNewTraitCompositionReplacing: noteRecategorizedSelectors:oldComposition: noteMethodAdded: noteMethodChanged:to: notifyOfRecategorizedSelector:from:to: noteMethodRemoved: updateOrganizationSelector:oldCategory:newCategory: updateOrganizationDescription:oldCategory:newCategory:changedCategories: noteRecategorizedSelector:from:to: noteChangesFrom:)(#printing storeOn: classVariablesString instanceVariablesString printOn: sharedPoolsString)(#composition - addExclusionOf: + @)(#authors addAuthorsTo: authors)(#'*rpackage-core' isExtended package isDefinedInPackage: packageOrganizer isExtendedInPackage: packageFromOrganizer: packages packagesWithoutExtensions extendingPackages)(#organization organization: category: zapOrganization organization category reorganize addCategory:before: whichCategoryIncludesSelector:)(#'users notification' notifyUsersOfChangedSelectors: notifyUsersOfRecategorizedSelector:from:to:)(#testing isTestCase)(#compatibility instanceVariables)(#accessing traitVersion version classVersion)(#'accessing method dictionary' addAndClassifySelector:withMethod:inProtocol:notifying: addSelectorSilently:withMethod: allMethodCategoriesIntegratedThrough: noteAddedSelector:meta: allMethodsInCategory: addSelector:withMethod:notifying: removeSelector: removeCategory: uncategorizedMethods allSelectorsWithout: methodsInCategory:)(#'class compatibility' theMetaClass theNonMetaClass)(#initialization obsolete)(#'filein/out' fileOutOn:moveSource:toFile: fileOutMethod:on: fileOutCategory: commentStamp:prior: printCategoryChunk:on:withStamp:priorMethod: commentStamp: fileOutChangedMessages:on: fileOutMethod: methodsFor: moveChangesTo: fileOutOn: fileOutChangedMessages:on:moveSource:toFile: fileOutCategory:on:moveSource:toFile: classComment:stamp: definition localMethods printMethodChunk:withPreamble:on:moveSource:toFile: classComment: fileOutOrganizationOn: selectorsToFileOutCategory: putClassCommentToCondensedChangesFile:)(#'closure support' variablesAndOffsetsDo:)(#copying copy:from: copyAllCategoriesFrom: copyAll:from:classified: copyMethodDictionaryFrom: copyCategory:from: copyCategory:from:classified: copyAll:from: copy:from:classified: copyTraitExpression)(#'as yet unclassified' updateOrganizationDescription:oldCategory:newCategory:changed:)(#'*NautilusCommon' correspondingForTest)(#'*Slot' composeWithLayout:)(#enquiries subject allAliasesDict aliasesForSelector: changedSelectorsComparedTo: collectMethodsFor:into: trait)(#'fileIn/Out' fileOut)(#'initialize-release' updateInstances:from:isMeta: superclass:methodDictionary:format: updateInstancesFrom:)(#private spaceUsed addCompositionOnLeft: notifyRepackage:method:oldProtocol:newProtocol: instVarMappingFrom: setInstVarNames: addOnTheLeft: numberOfMethods linesOfCode newInstanceFrom:variable:size:map: errorCategoryName)(#'accessing comment' comment: classCommentBlank hasComment comment comment:stamp:)(#converting asTraitComposition)(#compiling compile:classified: wantsRecompilationProgressReported compileSilently:classified:notifying: instVarNamesAndOffsetsDo: compileSilently: compile:classified:notifying: compile:classified:withStamp:notifying:logSource: compile:classified:withStamp:notifying: doneCompiling compile:notifying: logMethodSource:forMethod:inCategory:withStamp: noteCompilationOf:meta: acceptsLoggingOfCompilation wantsChangeSetLogging compileSilently:classified: reformatAll)(#'*FuelTests' duringTestCompileSilently: duringTestCompileSilently:classified:)(#'instance variables' classThatDefinesClassVariable: instVarNames forceNewFrom: instVarNameForIndex: instVarIndexFor: classThatDefinesInstanceVariable: allInstVarNamesEverywhere instVarIndexFor:ifAbsent: hasInstVarNamed: checkForInstVarsOK:)(#'accessing parallel hierarchy' hasClassTrait classTrait classSide isBaseTrait isMeta isClassTrait baseTrait instanceSide isClassSide isInstanceSide)(#'pool variable' usesLocalPoolVarNamed: allSharedPools sharedPoolOfVarNamed: usesPoolVarNamed: hasSharedPools)!!Behavior reorganize!(#'obsolete subclasses' allLocalCallsOn: basicObsoleteSubclasses addObsoleteSubclass: removeAllObsoleteSubclasses removeObsoleteSubclass: obsoleteSubclasses)(#testing isWeak isCompact isBehavior isBytes canZapMethodDictionary isObsolete shouldNotBeRedefined sourceMatchesBytecodeAt: instSpec instSize hasAbstractMethods isPointers isMeta isBits isFixed isVariable isWords)(#compiling instVarNamesAndOffsetsDo: variablesAndOffsetsDo:)(#'user interface' withAllSubAndSuperclassesDo: unreferencedInstanceVariables)(#'testing class hierarchy' kindOfSubclass includesBehavior: inheritsFrom:)(#traits addTraitSelector:withMethod: traits traitComposition: flattenDownAllTraits users flattenDown: classesComposedWithMe traitsProvidingSelector: traitOrClassOfSelector: notifyUsersOfChangedSelector: updateMethodDictionarySelector: removeUser: traitCompositionIncludes: purgeLocalSelectors noteChangedSelectors: traitComposition setTraitCompositionFrom: traitTransformations hasTraitComposition removeFromComposition: traitCompositionString removeTraitSelector: notifyUsersOfChangedSelectors: setTraitComposition: ensureLocalSelectors applyChangesOfNewTraitCompositionReplacing: addUser: addToComposition: addExclusionOf:to: removeAlias:of:)(#'*Manifest-Core' isManifest)(#copying deepCopy copyOfMethodDictionary postCopy)(#enumerating selectSuperclasses: subclassesDo: selectSubclasses: withAllSuperAndSubclassesDo: allSubclassesDo: withAllSuperclassesDo: allInstancesDo: allSubInstancesDo: allSuperclassesDo: allUnreferencedInstanceVariables)(#naming environment)(#'instance creation' new: basicNew: basicNew new)(#'as yet unclassified' isAnonymous)(#printing storeLiteral:on: printHierarchy literalScannedAs:notifying: longPrintOn: printOn:)(#'*Fuel' fuelNew fuelNew: fuelIgnoredInstanceVariableNames)(#'*Nautilus' realClass)(#'*Ring-Core-Kernel' protocols methodNamed: methodsInProtocol:)(#'accessing instances and variables' allInstVarNames includesSharedPoolNamed: allClassVarNames classVarNames instVarNames instanceCount allSharedPools allowsSubInstVars allSubInstances allInstances sharedPools subclassInstVarNames someInstance)(#'memory usage' instancesSizeInMemory)(#private setFormat: basicRemoveSelector: checkCanBeUncompact becomeUncompact becomeCompactSimplyAt: becomeCompact indexIfCompact spaceUsed flushCache)(#'*Rpackage-Core' originalName)(#initialization emptyMethodDictionary obsolete)(#'initialize-release' initialize nonObsoleteClass superclass:methodDictionary:format:)(#'*NativeBoost-Core' nbBindingOf: externalTypeAlias: nbFnArgument:generator:)(#'testing method dictionary' thoroughHasSelectorReferringTo:special:byte: isLocalAliasSelector: classBindingOf: canUnderstand: includesLocalSelector: whichSelectorsReferTo:special:byte: isDisabledSelector: thoroughWhichSelectorsReferTo:special:byte: whichSelectorsStoreInto: hasMethods canPerform: whichSelectorsAccess: whichSelectorsReferTo: whichClassIncludesSelector: isAliasSelector: includesSelector:)(#'accessing class hierarchy' allSubclasses superclass: withAllSubclasses subclasses withAllSuperclasses allSuperclassesIncluding: withAllSubclassesDo: superclass allSubclassesWithLevelDo:startingLevel: allSuperclasses)(#'*Tools-Inspector' inspectAllInstances inspectSubInstances)(#accessing isComposedBy: subclassDefinerClass methodDict classDepth name format numberOfInstanceVariables typeOfClass)(#'adding/removing methods' addSelectorSilently:withMethod: removeSelector: methodDictAddSelectorSilently:withMethod: adoptInstance: addSelector:withMethod:notifying: addSelector:withMethod: basicAddSelector:withMethod: localSelectors removeSelectorSilently:)(#'system startup' shutDown: shutDown startUp startUp:)(#'accessing method dictionary' allMethods compiledMethodAt:ifAbsent: selectors deregisterLocalSelector: methodDict: compress methodDictionary allSelectorsBelow: sourceCodeAt: allSelectorsAboveUntil: registerLocalSelector: basicLocalSelectors >> lookupSelector: nextQuotePosIn:startingFrom: allSelectorsAbove selectorsWithArgs: methodDictionary: supermostPrecodeCommentFor: basicLocalSelectors: changeRecordsAt: methods sourceCodeAt:ifAbsent: selectorsAndMethodsDo: firstCommentAt: zapAllMethods allSelectorsWithout: compiledMethodAt: classAndMethodFor:do:ifAbsent: firstPrecodeCommentFor: precodeCommentOrInheritedCommentFor: commentsAt: commentsIn: selectorsDo: methodsDo: ultimateSourceCodeAt:ifAbsent: allSelectors)(#'*System-Support' allCallsOnIn: allUnsentMessages allCallsOn referencedClasses allCallsOn:)(#'*Compiler-Kernel' decompilerClass recompile: parserClass compile: bindingOf: compile:classified:notifying:trailer:ifFail: compiler defaultMethodTrailer evaluatorClass compile:notifying: compileAll compileAllFrom: evaluate: compilerClass recompile:from: sourceCodeTemplate recompileChanges binding)(#cleanup cleanUp cleanUp:)(#'*ast-core' parseTreeFor:)(#queries whichSelectorsAssign: copiedFromSuperclass: whichClassDefinesInstVar: whichSuperclassSatisfies: copiesFromSuperclass: whichSelectorsRead: copiesMethodsFromSuperclass whichClassDefinesClassVar: copiedMethodsFromSuperclass)!TraitBehavior removeSelector: #'>>'!TraitBehavior removeSelector: #addExclusionOf:to:!TraitBehavior removeSelector: #addSelector:withMethod:!TraitBehavior removeSelector: #addSelector:withMethod:notifying:!TraitBehavior removeSelector: #addToComposition:!TraitBehavior removeSelector: #addUser:!TraitBehavior removeSelector: #allClassVarNames!TraitBehavior removeSelector: #allInstVarNames!TraitBehavior removeSelector: #allSelectors!TraitBehavior removeSelector: #allSubclasses!TraitBehavior removeSelector: #allSubclassesDo:!TraitBehavior removeSelector: #allSuperclasses!TraitBehavior removeSelector: #allSuperclassesDo:!TraitBehavior removeSelector: #applyChangesOfNewTraitCompositionReplacing:!TraitBehavior removeSelector: #basicAddSelector:withMethod:!TraitBehavior removeSelector: #binding!TraitBehavior removeSelector: #canZapMethodDictionary!TraitBehavior removeSelector: #changeRecordsAt:!TraitBehavior removeSelector: #compile:!TraitBehavior removeSelector: #compile:classified:notifying:trailer:ifFail:!TraitBehavior removeSelector: #compile:notifying:!TraitBehavior removeSelector: #compileAll!TraitBehavior removeSelector: #compileAllFrom:!TraitBehavior removeSelector: #compiledMethodAt:!TraitBehavior removeSelector: #compiledMethodAt:ifAbsent:!TraitBehavior removeSelector: #compiler!TraitBehavior removeSelector: #compilerClass!TraitBehavior removeSelector: #compress!TraitBehavior removeSelector: #copyOfMethodDictionary!TraitBehavior removeSelector: #decompilerClass!TraitBehavior removeSelector: #deepCopy!TraitBehavior removeSelector: #defaultMethodTrailer!TraitBehavior removeSelector: #deregisterLocalSelector:!TraitBehavior removeSelector: #emptyMethodDictionary!TraitBehavior removeSelector: #ensureLocalSelectors!TraitBehavior removeSelector: #environment!TraitBehavior removeSelector: #evaluate:!TraitBehavior removeSelector: #evaluatorClass!TraitBehavior removeSelector: #firstCommentAt:!TraitBehavior removeSelector: #firstPrecodeCommentFor:!TraitBehavior removeSelector: #flattenDown:!TraitBehavior removeSelector: #flattenDownAllTraits!TraitBehavior removeSelector: #hasMethods!TraitBehavior removeSelector: #includesLocalSelector:!TraitBehavior removeSelector: #includesSelector:!TraitBehavior removeSelector: #isAliasSelector:!TraitBehavior removeSelector: #isDisabledSelector:!TraitBehavior removeSelector: #isLocalAliasSelector:!TraitBehavior removeSelector: #literalScannedAs:notifying:!TraitBehavior removeSelector: #localSelectors!TraitBehavior removeSelector: #longPrintOn:!TraitBehavior removeSelector: #methodDictAddSelectorSilently:withMethod:!TraitBehavior removeSelector: #methodDictionary!TraitBehavior removeSelector: #methodDictionary:!TraitBehavior removeSelector: #methodNamed:!TraitBehavior removeSelector: #methods!TraitBehavior removeSelector: #methodsDo:!TraitBehavior removeSelector: #methodsInProtocol:!TraitBehavior removeSelector: #noteChangedSelectors:!TraitBehavior removeSelector: #notifyUsersOfChangedSelector:!TraitBehavior removeSelector: #notifyUsersOfChangedSelectors:!TraitBehavior removeSelector: #obsolete!TraitBehavior removeSelector: #originalName!TraitBehavior removeSelector: #parserClass!TraitBehavior removeSelector: #postCopy!TraitBehavior removeSelector: #protocols!TraitBehavior removeSelector: #purgeLocalSelectors!TraitBehavior removeSelector: #recompile:!TraitBehavior removeSelector: #recompileChanges!TraitBehavior removeSelector: #registerLocalSelector:!TraitBehavior removeSelector: #removeAlias:of:!TraitBehavior removeSelector: #removeFromComposition:!TraitBehavior removeSelector: #removeFromTraitCompositionOfUsers!TraitBehavior removeSelector: #removeSelectorSilently:!TraitBehavior removeSelector: #removeTraitSelector:!TraitBehavior removeSelector: #removeUser:!TraitBehavior removeSelector: #selectors!TraitBehavior removeSelector: #selectorsAndMethodsDo:!TraitBehavior removeSelector: #selectorsDo:!TraitBehavior removeSelector: #setTraitComposition:!TraitBehavior removeSelector: #setTraitCompositionFrom:!TraitBehavior removeSelector: #sharedPools!TraitBehavior removeSelector: #sourceCodeAt:!TraitBehavior removeSelector: #sourceCodeAt:ifAbsent:!TraitBehavior removeSelector: #sourceCodeTemplate!TraitBehavior removeSelector: #spaceUsed!TraitBehavior removeSelector: #storeLiteral:on:!TraitBehavior removeSelector: #thoroughHasSelectorReferringTo:special:byte:!TraitBehavior removeSelector: #thoroughWhichSelectorsReferTo:special:byte:!TraitBehavior removeSelector: #traitCompositionIncludes:!TraitBehavior removeSelector: #traitCompositionString!TraitBehavior removeSelector: #traitOrClassOfSelector:!TraitBehavior removeSelector: #traitTransformations!TraitBehavior removeSelector: #traits!TraitBehavior removeSelector: #traitsProvidingSelector:!TraitBehavior removeSelector: #ultimateSourceCodeAt:ifAbsent:!TraitBehavior removeSelector: #updateMethodDictionarySelector:!TraitBehavior removeSelector: #whichClassIncludesSelector:!TraitBehavior removeSelector: #whichSelectorsReferTo:!TraitBehavior removeSelector: #whichSelectorsReferTo:special:byte:!TraitBehavior removeSelector: #withAllSubclasses!TraitBehavior removeSelector: #withAllSubclassesDo:!TraitBehavior removeSelector: #withAllSuperclasses!TraitBehavior removeSelector: #zapAllMethods!!TraitBehavior reorganize!(#'adding/removing methods' basicAddSelector:withMethod: pureAddSelectorSilently:withMethod: pureRemoveSelector: adoptInstance: basicRemoveSelector:)(#'remove me later' classPool)(#naming name)(#'*Rpackage-Core')(#'testing method dictionary' whichClassIncludesSelector: canPerform: classBindingOf: whichSelectorsAccess: whichSelectorsStoreInto: canUnderstand: thoroughWhichSelectorsReferTo:special:byte:)(#printing printHierarchy printOn:)(#'memory usage' instancesSizeInMemory)(#'system startup' shutDown: shutDown startUp: startUp)(#'accessing method dictionary' removeSelector: supermostPrecodeCommentFor: allSelectorsBelow: methodDict: zapAllMethods allSelectorsAbove lookupSelector: methodDict precodeCommentOrInheritedCommentFor: basicLocalSelectors nextQuotePosIn:startingFrom: addSelectorSilently:withMethod: selectorsWithArgs: allSelectorsWithout: allMethods allSelectorsAboveUntil: ultimateSourceCodeAt:ifAbsent: commentsIn: basicLocalSelectors: commentsAt: classAndMethodFor:do:ifAbsent:)(#'obsolete subclasses' removeAllObsoleteSubclasses removeObsoleteSubclass: addObsoleteSubclass: allLocalCallsOn: obsoleteSubclasses)(#'*Compiler-Kernel' recompile:from: bindingOf:)(#'accessing class hierarchy' withAllSubclassesDo: allSuperclasses allSubclassesWithLevelDo:startingLevel: allSuperclassesIncluding: withAllSubclasses allSubclasses)(#traits addUser: traitComposition users classesComposedWithMe addTraitSelector:withMethod: removeUser: hasTraitComposition traitComposition:)(#'initialize-release' initialize nonObsoleteClass superclass:methodDictionary:format:)(#ambiguous compiledMethodAt:ifAbsent: methodDictionary: addSelector:withMethod: compileAll withAllSuperclasses methodDictAddSelectorSilently:withMethod: recompile: methodDictionary changeRecordsAt: updateMethodDictionarySelector: protocols obsolete allSelectors traitTransformations compileAllFrom: addExclusionOf:to: compile: ensureLocalSelectors compilerClass compiledMethodAt: environment firstPrecodeCommentFor: deepCopy selectorsAndMethodsDo: traitOrClassOfSelector: selectors removeFromComposition: removeAlias:of: notifyUsersOfChangedSelectors: literalScannedAs:notifying: traits compress compile:notifying: canZapMethodDictionary postCopy binding sourceCodeTemplate flattenDown: compile:classified:notifying:trailer:ifFail: copyOfMethodDictionary setTraitCompositionFrom: sourceCodeAt:ifAbsent: thoroughHasSelectorReferringTo:special:byte: evaluatorClass traitsProvidingSelector: localSelectors evaluate: registerLocalSelector: isLocalAliasSelector: selectorsDo: methodNamed: removeTraitSelector: addToComposition: includesLocalSelector: firstCommentAt: isAliasSelector: >> emptyMethodDictionary storeLiteral:on: isDisabledSelector: recompileChanges includesSelector: defaultMethodTrailer sourceCodeAt: methods deregisterLocalSelector: methodsInProtocol: whichSelectorsReferTo: methodsDo: purgeLocalSelectors parserClass flattenDownAllTraits longPrintOn: spaceUsed noteChangedSelectors: removeSelectorSilently: decompilerClass applyChangesOfNewTraitCompositionReplacing: hasMethods compiler originalName setTraitComposition: addSelector:withMethod:notifying: whichSelectorsReferTo:special:byte: notifyUsersOfChangedSelector: traitCompositionIncludes: traitCompositionString)(#copying)(#compatibility superclass subclasses)(#'accessing instances and variables' allInstVarNames includesSharedPoolNamed: allClassVarNames instanceCount allSharedPools allowsSubInstVars allSubInstances allInstances sharedPools subclassInstVarNames someInstance)(#'testing class hierarchy' kindOfSubclass)(#queries copiesMethodsFromSuperclass copiedMethodsFromSuperclass whichClassDefinesInstVar: whichSuperclassSatisfies: copiesFromSuperclass: whichSelectorsRead: whichClassDefinesClassVar: whichSelectorsAssign: copiedFromSuperclass:)(#accessing numberOfInstanceVariables classDepth typeOfClass)(#private becomeUncompact checkCanBeUncompact flushCache becomeCompactSimplyAt: becomeCompact indexIfCompact)(#cleanup cleanUp cleanUp:)(#testing isObsolete includesBehavior: isBytes isTrait isAnonymous isBits hasAbstractMethods isWeak isCompact isPointers isComposedBy: isWords isMeta shouldNotBeRedefined isVariable isFixed sourceMatchesBytecodeAt: instSpec)(#'user interface' withAllSubAndSuperclassesDo: unreferencedInstanceVariables)(#enumerating selectSuperclasses: subclassesDo: selectSubclasses: withAllSuperAndSubclassesDo: allSubclassesDo: withAllSuperclassesDo: allInstancesDo: allUnreferencedInstanceVariables allSuperclassesDo: allSubInstancesDo:)(#compiling instVarNamesAndOffsetsDo: variablesAndOffsetsDo:)(#'*Tools-Browser' browse)(#'instance creation' new: basicNew: basicNew new)(#'class compatibility' inheritsFrom: instSize subclassDefinerClass poolDictionaryNames classVarNames instVarNames)(#initialization)!TPureBehavior removeSelector: #basicAddSelector:withMethod:!TPureBehavior removeSelector: #classAndMethodFor:do:ifAbsent:!TClassDescription removeSelector: #removeSelector:!