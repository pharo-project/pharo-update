'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 28 March 2007 at 12:06:25 pm'!"Change Set:		weakfix3Date:			18 March 2007Author:			Martin v. LoewisAdd all changed methods for WeakKeyDictionary."!!WeakKeyDictionary methodsFor: 'accessing' stamp: 'mvl 3/18/2007 09:50'!at: key put: anObject 	"Set the value at key to be anObject.  If key is not found, create a new	entry for key and set is value to anObject. Answer anObject."	| index element |	key isNil ifTrue:[^anObject].	index := self scanForEmpty: key.		"There should always be room."	index = 0 ifTrue: [ self error: 'No space left in dictionary' ].		element := array at: index.	element == nil		ifTrue: [self atNewIndex: index put: (WeakKeyAssociation key: key value: anObject)]		ifFalse: [			element expired ifTrue: [ tally := tally + 1].			element key: key.			element value: anObject.			self fullCheck.		].	^ anObject! !!WeakKeyDictionary methodsFor: 'finalization' stamp: 'mvl 3/17/2007 21:29'!finalizeValues	"Clear all associations with nil keys"	array do:[:assoc|		assoc ifNotNil:[			assoc expire ifTrue:[				expired := expired + 1.				tally := tally - 1.			].		].	].! !!WeakKeyDictionary methodsFor: 'finalization' stamp: 'mvl 3/17/2007 21:29'!finalizeValues: finiObjects	"Clear all associations with key == nil and value is in finiObjects."	array do:[:assoc|		(assoc notNil and:[finiObjects includes: assoc value]) ifTrue:[			assoc expire.			expired := expired + 1.			tally := tally - 1.		].	].! !!WeakKeyDictionary methodsFor: 'private' stamp: 'mvl 3/18/2007 11:38'!copy	"Must copy the associations, or later store will affect both theoriginal and the copy"	^ self shallowCopy withArray:		(array collect: [:assoc |			assoc ifNil: [nil]				ifNotNil: [					assoc expired ifTrue: [ WeakKeyAssociation expired]					ifFalse: [Association key: assoc key value: assoc value]				]])! !!WeakKeyDictionary methodsFor: 'private' stamp: 'mvl 3/18/2007 08:48'!fullCheck	"If we have too many expired entries, rehash"		"First do the Set fullCheck, as that may decide to grow"	super fullCheck.	4 * expired > array size ifTrue: [self rehash].! !!WeakKeyDictionary methodsFor: 'private' stamp: 'mvl 3/11/2007 21:43'!grow	super grow.	expired _ 0.! !!WeakKeyDictionary methodsFor: 'private' stamp: 'mvl 3/28/2007 12:03'!noCheckAdd: anAssociation	"Add anAssociation to the receiver. Discard expired associations. Put nil keys at the beginning."		| key |		key := anAssociation key. "Hold on to the key during this method"	anAssociation expired ifFalse:[		key ifNotNil:[			super noCheckAdd: anAssociation		] ifNil: [			1 to: array size do:[:n|				(array at: n) ifNil:[					array at: n put: anAssociation. 					tally := tally + 1.					^self				].			].			self error: 'could not find an empty slot.'		].	].! !!WeakKeyDictionary methodsFor: 'private' stamp: 'mvl 3/18/2007 08:02'!rehash	"Rehash the receiver."	| newSelf |	newSelf := self species new: self size.	self associationsDo: [:each | newSelf noCheckAddForRehash: each].	array := newSelf array.	expired := 0.! !!WeakKeyDictionary methodsFor: 'private' stamp: 'mvl 3/18/2007 09:49'!scanFor: anObject	"mvl 10/21/2007: The method has been copied to this location to indicate that whenever #scanFor: changes #scanForEmpty: must be changed in the receiver as well."	"Scan the key array for the first slot containing either a nil (indicating an empty slot) or an element that matches anObject. Answer the index of that slot or zero if no slot is found. Expired associations are ignored, since callers take non-nil slots as a successful search. Subclasses should override startIndexFor: and compare:to: if they have a different semantics for matching elements."	| element start finish |	finish _ array size.	start _ self startIndexFor: anObject.		"Search from (hash mod size) to the end."	start to: finish do:		[:index | ((element _ array at: index) == nil or: [self compare: element key to: anObject])			ifTrue: [^ index ]].	"Search from 1 to where we started."	1 to: start-1 do:		[:index | ((element _ array at: index) == nil or: [self compare: element key to: anObject])			ifTrue: [^ index ]].	^ 0  "No match AND no empty slot"! !!WeakKeyDictionary methodsFor: 'enumerating' stamp: 'mvl 3/15/2007 16:11'!associationsDo: aBlock 	"Evaluate aBlock for each of the receiver's elements (key/value 	associations)."	| key |	super associationsDo: [:association | 		"Hold onto the key so it won't be collected while the block is evaluated."		key := association key.		key ifNotNil:[aBlock value: association]].! !!WeakKeyDictionary methodsFor: 'removing' stamp: 'mvl 3/18/2007 11:41'!removeKey: key ifAbsent: aBlock	"Remove key (and its associated value) from the receiver. If key is not in 	the receiver, answer the result of evaluating aBlock. Otherwise, answer 	the value externally named by key."	| index result assoc |	index := self findElementOrNil: key.	assoc := array at: index.	(assoc == nil or: [assoc key isNil]) ifTrue: [ ^ aBlock value ].	assoc key: nil.	result := assoc value.	assoc expire.	expired := expired + 1.	tally := tally - 1.	^result! !WeakKeyDictionary removeSelector: #keysDo:!