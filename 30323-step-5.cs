'From Pharo3.0 of 18 March 2013 [Latest update: #30291] on 22 July 2013 at 2:53:29 pm'!CollectionRootTest subclass: #SymbolTest	uses: TIncludesTest + (TCloneTest - {#testCopyCreatesNewObject}) + TCopyPreservingIdentityTest + TCopyTest + (TSetArithmetic - {#testDifferenceWithNonNullIntersection}) + TIterateSequencedReadableTest + TSequencedConcatenationTest + TPrintOnSequencedTest + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + (TIndexAccessForMultipliness - {#testIdentityIndexOfIAbsentDuplicate. #testIdentityIndexOfDuplicate. #collectionWithNonIdentitySameAtEndAndBegining}) + TSequencedElementAccessTest + TSubCollectionAccess + (TCopySequenceableSameContents - {#testShuffled}) + (TCopyPartOfSequenceable - {#testCopyEmptyMethod. #integerCollectionWithoutEqualElements}) + TCopyPartOfSequenceableForMultipliness + TCopySequenceableWithReplacement + TBeginsEndsWith + TConvertAsSortedTest + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + TCopySequenceableWithOrWithoutSpecificElements + TConvertAsSetForMultiplinessTest + TSequencedStructuralEqualityTest + TOccurrencesForMultiplinessTest	instanceVariableNames: 'emptySymbol nonEmptySymbol5ElementsNoDuplicates notIn collectionNotIncluded collectionSize4 collection1Element sameAtEndAndBegining with2timeSubcollection subcollection3ElementsSorted '	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Strings'!!CollectionRootTest methodsFor: 'requirements' stamp: 'SebastianTleye 7/22/2013 14:37'!sizeCollection	"Answers a collection not empty"	^ self subclassResponsability! !!CollectionRootTest methodsFor: 'requirements' stamp: 'SebastianTleye 7/22/2013 14:37'!sizeCollection	"Answers a collection not empty"	^ self subclassResponsability! !SetTest removeSelector: #testAddEmptyGrows!SetTest removeSelector: #testAddNewElementIncrementsSize!SetTest removeSelector: #testAsSortedArray!SetTest removeSelector: #testCopyEmptyWith!SetTest removeSelector: #testCopyEmptyWithout!SetTest removeSelector: #testCopyEmptyWithoutAll!SetTest removeSelector: #testCopyNonEmptyWith!SetTest removeSelector: #testCopyNonEmptyWithoutAll!SetTest removeSelector: #testCopyNonEmptyWithoutNotIncluded!SetTest removeSelector: #testRemoveAllError!SetTest removeSelector: #testRemoveAllFoundIn!SetTest removeSelector: #testTAddIfNotPresentWithNewElement!SortedCollectionTest removeSelector: #collectionWithCopy!SortedCollectionTest removeSelector: #collectionWithIdentical!SortedCollectionTest removeSelector: #testAsSortedArray!SortedCollectionTest removeSelector: #testRemoveAllError!SortedCollectionTest removeSelector: #testRemoveAllFoundIn!FloatArrayTest removeSelector: #testAsSortedArray!FloatArrayTest removeSelector: #testSwapWith!SymbolTest removeSelector: #assertNoDuplicates:whenConvertedTo:!SymbolTest removeSelector: #assertNonDuplicatedContents:whenConvertedTo:!SymbolTest removeSelector: #assertSameContents:whenConvertedTo:!SymbolTest removeSelector: #containsAll:of:andOf:!SymbolTest removeSelector: #firstIndexesOf:in:!SymbolTest removeSelector: #howMany:in:!SymbolTest removeSelector: #integerCollectionWithoutEqualElements!SymbolTest removeSelector: #numberOfSimilarElementsInIntersection!SymbolTest removeSelector: #test0CopyTest!SymbolTest removeSelector: #test0FixtureAsStringCommaAndDelimiterTest!SymbolTest removeSelector: #test0FixtureBeginsEndsWithTest!SymbolTest removeSelector: #test0FixtureCloneTest!SymbolTest removeSelector: #test0FixtureConverAsSortedTest!SymbolTest removeSelector: #test0FixtureCopyPartOfForMultipliness!SymbolTest removeSelector: #test0FixtureCopyPartOfSequenceableTest!SymbolTest removeSelector: #test0FixtureCopySameContentsTest!SymbolTest removeSelector: #test0FixtureCopyWithOrWithoutSpecificElementsTest!SymbolTest removeSelector: #test0FixtureCopyWithReplacementTest!SymbolTest removeSelector: #test0FixtureIncludeTest!SymbolTest removeSelector: #test0FixtureIndexAccessFotMultipliness!SymbolTest removeSelector: #test0FixtureIndexAccessTest!SymbolTest removeSelector: #test0FixtureIterateSequencedReadableTest!SymbolTest removeSelector: #test0FixtureOccurrencesForMultiplinessTest!SymbolTest removeSelector: #test0FixtureOccurrencesTest!SymbolTest removeSelector: #test0FixturePrintTest!SymbolTest removeSelector: #test0FixtureSequencedConcatenationTest!SymbolTest removeSelector: #test0FixtureSequencedElementAccessTest!SymbolTest removeSelector: #test0FixtureSetAritmeticTest!SymbolTest removeSelector: #test0FixtureSubcollectionAccessTest!SymbolTest removeSelector: #test0FixtureTConvertAsSetForMultiplinessTest!SymbolTest removeSelector: #test0FixtureTConvertTest!SymbolTest removeSelector: #test0TSequencedStructuralEqualityTest!SymbolTest removeSelector: #test0TStructuralEqualityTest!SymbolTest removeSelector: #testAfter!SymbolTest removeSelector: #testAfterIfAbsent!SymbolTest removeSelector: #testAllButFirst!SymbolTest removeSelector: #testAllButFirstDo!SymbolTest removeSelector: #testAllButFirstNElements!SymbolTest removeSelector: #testAllButLast!SymbolTest removeSelector: #testAllButLastDo!SymbolTest removeSelector: #testAllButLastNElements!SymbolTest removeSelector: #testAsArray!SymbolTest removeSelector: #testAsBag!SymbolTest removeSelector: #testAsCommaStringEmpty!SymbolTest removeSelector: #testAsCommaStringMore!SymbolTest removeSelector: #testAsCommaStringOne!SymbolTest removeSelector: #testAsIdentitySet!SymbolTest removeSelector: #testAsIdentitySetWithEqualsElements!SymbolTest removeSelector: #testAsOrderedCollection!SymbolTest removeSelector: #testAsSet!SymbolTest removeSelector: #testAsSetWithEqualsElements!SymbolTest removeSelector: #testAsSortedArray!SymbolTest removeSelector: #testAsSortedCollection!SymbolTest removeSelector: #testAsSortedCollectionWithSortBlock!SymbolTest removeSelector: #testAsStringOnDelimiterEmpty!SymbolTest removeSelector: #testAsStringOnDelimiterLastEmpty!SymbolTest removeSelector: #testAsStringOnDelimiterLastMore!SymbolTest removeSelector: #testAsStringOnDelimiterLastOne!SymbolTest removeSelector: #testAsStringOnDelimiterMore!SymbolTest removeSelector: #testAsStringOnDelimiterOne!SymbolTest removeSelector: #testAt!SymbolTest removeSelector: #testAtAll!SymbolTest removeSelector: #testAtIfAbsent!SymbolTest removeSelector: #testAtLast!SymbolTest removeSelector: #testAtLastError!SymbolTest removeSelector: #testAtLastIfAbsent!SymbolTest removeSelector: #testAtOutOfBounds!SymbolTest removeSelector: #testAtPin!SymbolTest removeSelector: #testAtRandom!SymbolTest removeSelector: #testAtWrap!SymbolTest removeSelector: #testBefore!SymbolTest removeSelector: #testBeforeIfAbsent!SymbolTest removeSelector: #testCollectFromTo!SymbolTest removeSelector: #testConcatenation!SymbolTest removeSelector: #testConcatenationWithEmpty!SymbolTest removeSelector: #testCopyAfter!SymbolTest removeSelector: #testCopyAfterEmpty!SymbolTest removeSelector: #testCopyAfterLast!SymbolTest removeSelector: #testCopyAfterLastEmpty!SymbolTest removeSelector: #testCopyAfterLastWithDuplicate!SymbolTest removeSelector: #testCopyAfterWithDuplicate!SymbolTest removeSelector: #testCopyEmpty!SymbolTest removeSelector: #testCopyEmptyWith!SymbolTest removeSelector: #testCopyEmptyWithout!SymbolTest removeSelector: #testCopyEmptyWithoutAll!SymbolTest removeSelector: #testCopyEquals!SymbolTest removeSelector: #testCopyFromTo!SymbolTest removeSelector: #testCopyNonEmpty!SymbolTest removeSelector: #testCopyNonEmptyWith!SymbolTest removeSelector: #testCopyNonEmptyWithout!SymbolTest removeSelector: #testCopyNonEmptyWithoutAll!SymbolTest removeSelector: #testCopyNonEmptyWithoutNotIncluded!SymbolTest removeSelector: #testCopyReplaceAllWith1Occurence!SymbolTest removeSelector: #testCopyReplaceAllWithManyOccurence!SymbolTest removeSelector: #testCopyReplaceFromToWith!SymbolTest removeSelector: #testCopyReplaceFromToWithInsertion!SymbolTest removeSelector: #testCopyReturnsIdentity!SymbolTest removeSelector: #testCopySameClass!SymbolTest removeSelector: #testCopyUpTo!SymbolTest removeSelector: #testCopyUpToEmpty!SymbolTest removeSelector: #testCopyUpToLast!SymbolTest removeSelector: #testCopyUpToLastEmpty!SymbolTest removeSelector: #testCopyUpToLastWithDuplicate!SymbolTest removeSelector: #testCopyUpToWithDuplicate!SymbolTest removeSelector: #testCopyWithFirst!SymbolTest removeSelector: #testCopyWithSequenceable!SymbolTest removeSelector: #testCopyWithoutFirst!SymbolTest removeSelector: #testCopyWithoutIndex!SymbolTest removeSelector: #testDetectSequenced!SymbolTest removeSelector: #testDifference!SymbolTest removeSelector: #testDifferenceWithSeparateCollection!SymbolTest removeSelector: #testDo!SymbolTest removeSelector: #testEqualSign!SymbolTest removeSelector: #testEqualSignForSequenceableCollections!SymbolTest removeSelector: #testEqualSignIsTrueForEmptyButNonIdenticalCollections!SymbolTest removeSelector: #testEqualSignIsTrueForNonIdenticalButEqualCollections!SymbolTest removeSelector: #testEqualSignOfIdenticalCollectionObjects!SymbolTest removeSelector: #testFindFirst!SymbolTest removeSelector: #testFindFirstNotIn!SymbolTest removeSelector: #testFindLast!SymbolTest removeSelector: #testFindLastNotIn!SymbolTest removeSelector: #testFirstNElements!SymbolTest removeSelector: #testFirstSecondThird!SymbolTest removeSelector: #testForceToPaddingStartWith!SymbolTest removeSelector: #testForceToPaddingWith!SymbolTest removeSelector: #testFromToDo!SymbolTest removeSelector: #testHasEqualElements!SymbolTest removeSelector: #testHasEqualElementsIsTrueForNonIdenticalButEqualCollections!SymbolTest removeSelector: #testHasEqualElementsOfIdenticalCollectionObjects!SymbolTest removeSelector: #testIdentityIncludesNonSpecificComportement!SymbolTest removeSelector: #testIdentityIndexOf!SymbolTest removeSelector: #testIdentityIndexOfIAbsent!SymbolTest removeSelector: #testIncludesAllNoneThere!SymbolTest removeSelector: #testIncludesAnyAllThere!SymbolTest removeSelector: #testIncludesAnyNoneThere!SymbolTest removeSelector: #testIncludesElementIsNotThere!SymbolTest removeSelector: #testIncludesElementIsThere!SymbolTest removeSelector: #testIndexOf!SymbolTest removeSelector: #testIndexOfDuplicate!SymbolTest removeSelector: #testIndexOfIfAbsent!SymbolTest removeSelector: #testIndexOfIfAbsentDuplicate!SymbolTest removeSelector: #testIndexOfStartingAt!SymbolTest removeSelector: #testIndexOfStartingAtDuplicate!SymbolTest removeSelector: #testIndexOfStartingAtIfAbsent!SymbolTest removeSelector: #testIndexOfSubCollectionStartingAt!SymbolTest removeSelector: #testIndexOfSubCollectionStartingAtIfAbsent!SymbolTest removeSelector: #testIntersectionBasic!SymbolTest removeSelector: #testIntersectionEmpty!SymbolTest removeSelector: #testIntersectionItself!SymbolTest removeSelector: #testIntersectionTwoSimilarElementsInIntersection!SymbolTest removeSelector: #testKeysAndValuesDo!SymbolTest removeSelector: #testKeysAndValuesDoEmpty!SymbolTest removeSelector: #testLast!SymbolTest removeSelector: #testLastIndexOf!SymbolTest removeSelector: #testLastIndexOfDuplicate!SymbolTest removeSelector: #testLastIndexOfIfAbsent!SymbolTest removeSelector: #testLastIndexOfIfAbsentDuplicate!SymbolTest removeSelector: #testLastIndexOfStartingAt!SymbolTest removeSelector: #testLastIndexOfStartingAtDuplicate!SymbolTest removeSelector: #testLastNElements!SymbolTest removeSelector: #testMiddle!SymbolTest removeSelector: #testOccurrencesOf!SymbolTest removeSelector: #testOccurrencesOfEmpty!SymbolTest removeSelector: #testOccurrencesOfForMultipliness!SymbolTest removeSelector: #testOccurrencesOfNotIn!SymbolTest removeSelector: #testPairsCollect!SymbolTest removeSelector: #testPairsDo!SymbolTest removeSelector: #testPrintElementsOn!SymbolTest removeSelector: #testPrintNameOn!SymbolTest removeSelector: #testPrintOn!SymbolTest removeSelector: #testPrintOnDelimiter!SymbolTest removeSelector: #testPrintOnDelimiterLast!SymbolTest removeSelector: #testReverse!SymbolTest removeSelector: #testReverseDo!SymbolTest removeSelector: #testReverseDoEmpty!SymbolTest removeSelector: #testReverseWithDo!SymbolTest removeSelector: #testReversed!SymbolTest removeSelector: #testShallowCopy!SymbolTest removeSelector: #testShallowCopyEmpty!SymbolTest removeSelector: #testStoreOn!SymbolTest removeSelector: #testStreamContents!SymbolTest removeSelector: #testStreamContentsProtocol!SymbolTest removeSelector: #testStreamContentsSized!SymbolTest removeSelector: #testUnion!SymbolTest removeSelector: #testUnionOfEmpties!SymbolTest removeSelector: #testWithCollect!SymbolTest removeSelector: #testWithCollectError!SymbolTest removeSelector: #testWithDo!SymbolTest removeSelector: #testWithDoError!SymbolTest removeSelector: #testWithIndexCollect!SymbolTest removeSelector: #testWithIndexDo!SymbolTest removeSelector: #testsBeginsWith!SymbolTest removeSelector: #testsBeginsWithEmpty!SymbolTest removeSelector: #testsEndsWith!SymbolTest removeSelector: #testsEndsWithEmpty!CollectionRootTest subclass: #SymbolTest	uses: TIncludesTest + (TCloneTest - {#testCopyCreatesNewObject}) + TCopyPreservingIdentityTest + TCopyTest + (TSetArithmetic - {#testDifferenceWithNonNullIntersection}) + TIterateSequencedReadableTest + TSequencedConcatenationTest + TPrintOnSequencedTest + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + (TIndexAccessForMultipliness - {#testIdentityIndexOfIAbsentDuplicate. #testIdentityIndexOfDuplicate. #collectionWithNonIdentitySameAtEndAndBegining}) + TSequencedElementAccessTest + TSubCollectionAccess + (TCopySequenceableSameContents - {#testShuffled}) + (TCopyPartOfSequenceable - {#testCopyEmptyMethod. #integerCollectionWithoutEqualElements}) + TCopyPartOfSequenceableForMultipliness + TCopySequenceableWithReplacement + TBeginsEndsWith + TConvertAsSortedTest + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + TCopySequenceableWithOrWithoutSpecificElements + TConvertAsSetForMultiplinessTest + TSequencedStructuralEqualityTest + TOccurrencesForMultiplinessTest	instanceVariableNames: 'emptySymbol nonEmptySymbol5ElementsNoDuplicates notIn collectionNotIncluded collectionSize4 collection1Element sameAtEndAndBegining with2timeSubcollection subcollection3ElementsSorted'	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Strings'!!SymbolTest reorganize!(#'tests - copying part of sequenceable for multipliness' testCopyUpToLastWithDuplicate testCopyUpToWithDuplicate testCopyAfterWithDuplicate testCopyAfterLastWithDuplicate)(#'tests - index accessing for multipliness' testLastIndexOfIfAbsentDuplicate testIndexOfDuplicate testLastIndexOfDuplicate testIndexOfIfAbsentDuplicate testIndexOfStartingAtDuplicate testLastIndexOfStartingAtDuplicate)(#'tests - copying part of sequenceable' testCopyUpTo testCopyAfterEmpty testCopyUpToEmpty testCopyUpToLastEmpty testCopyAfterLastEmpty testCopyAfterLast testCopyAfter testCopyFromTo testCopyUpToLast)(#'test - set arithmetic' collectionClass)(#'tests - equality' testHasEqualElementsOfIdenticalCollectionObjects testEqualSignForSequenceableCollections testHasEqualElementsIsTrueForNonIdenticalButEqualCollections testHasEqualElements)(#'*System-Support' testAsClassIfPresent testAsClass testAsClassIfAbsent)(#'tests - comma and delimiter' testAsStringOnDelimiterLastEmpty testAsCommaStringMore testAsStringOnDelimiterEmpty testAsStringOnDelimiterMore testAsStringOnDelimiterOne testAsCommaStringEmpty testAsStringOnDelimiterLastOne testAsCommaStringOne testAsStringOnDelimiterLastMore)(#'tests - element accessing' testAt testBefore testAtAll testAtPin testAtLastError testLast testAfterIfAbsent testAtOutOfBounds testAtRandom testAtIfAbsent testMiddle testBeforeIfAbsent testAtWrap testAtLast testFirstSecondThird testAfter testAtLastIfAbsent)(#'tests - as sorted collection' testAsSortedCollection testAsSortedArray testAsSortedCollectionWithSortBlock)(#tests testWithFirstCharacterDownshifted testNumArgsKeyword2 testCapitalized testNumArgsBinary testAsMutator testNumArgsKeyword1 testNumArgsUnary testNumArgs2)(#'tests - occurrencesOf' testOccurrencesOf testOccurrencesOfEmpty testOccurrencesOfNotIn)(#'tests - includes' testIdentityIncludesNonSpecificComportement testIncludesAnyAllThere testIncludesAnyNoneThere testIncludesElementIsNotThere testIncludesElementIsThere testIncludesAllNoneThere)(#'tests - copying same contents' testReversed testShallowCopyEmpty testReverse testShallowCopy)(#'tests - fixture' test0FixtureCloneTest test0FixturePrintTest test0FixtureCopyPartOfSequenceableTest test0FixtureConverAsSortedTest test0FixtureTConvertTest test0FixtureSequencedConcatenationTest test0FixtureSetAritmeticTest test0FixtureCopyPartOfForMultipliness test0FixtureSubcollectionAccessTest howMany:in: test0FixtureCopyWithOrWithoutSpecificElementsTest test0FixtureTConvertAsSetForMultiplinessTest test0TSequencedStructuralEqualityTest test0FixtureOccurrencesTest test0FixtureOccurrencesForMultiplinessTest test0FixtureAsStringCommaAndDelimiterTest test0FixtureCopySameContentsTest test0FixtureIncludeTest test0FixtureIndexAccessFotMultipliness test0FixtureIterateSequencedReadableTest test0TStructuralEqualityTest test0FixtureIndexAccessTest test0FixtureCopyWithReplacementTest test0FixtureBeginsEndsWithTest test0FixtureSequencedElementAccessTest test0CopyTest)(#'test - equality' testEqualSignOfIdenticalCollectionObjects testEqualSign testEqualSignIsTrueForEmptyButNonIdenticalCollections testEqualSignIsTrueForNonIdenticalButEqualCollections)(#'tests - streaming' testStreamContentsSized testStreamContentsProtocol testStreamContents)(#'tests - copying with or without' testCopyWithoutFirst testCopyWithoutIndex testForceToPaddingWith testForceToPaddingStartWith testCopyWithFirst testCopyWithSequenceable)(#'tests - copying with replacement' testCopyReplaceFromToWithInsertion testCopyReplaceAllWithManyOccurence firstIndexesOf:in: testCopyReplaceAllWith1Occurence testCopyReplaceFromToWith)(#'tests - iterate on sequenced reable collections' testFindLast testKeysAndValuesDoEmpty testWithDoError testReverseDoEmpty testWithDo testFindLastNotIn testFromToDo testPairsDo testWithCollect testKeysAndValuesDo testWithIndexDo testWithIndexCollect testReverseDo testReverseWithDo testDo testAllButLastDo testFindFirst testCollectFromTo testFindFirstNotIn testWithCollectError testAllButFirstDo testPairsCollect testDetectSequenced)(#'tests - index access' testLastIndexOfStartingAt testIdentityIndexOfIAbsent testLastIndexOfIfAbsent testIndexOfSubCollectionStartingAt testIndexOfStartingAt testIndexOf testIndexOfStartingAtIfAbsent testIndexOfIfAbsent testIndexOfSubCollectionStartingAtIfAbsent testLastIndexOf testIdentityIndexOf)(#requirements collectionWithoutNilElements elementInForElementAccessing collectionWithSameAtEndAndBegining collectionWithSortableElements anotherElementOrAssociationIn collectionWithElementsToRemove collectionWithoutEqualElements subCollectionNotIn moreThan3Elements indexInForCollectionWithoutDuplicates elementTwiceInForOccurrences empty elementInForIndexAccessing elementNotInForIndexAccessing collectionWith2TimeSubcollection secondCollection sizeCollection anotherElementNotIn indexInNonEmpty nonEmpty moreThan4Elements withEqualElements nonEmpty1Element elementNotInForElementAccessing collectionMoreThan1NoDuplicates anotherElementOrAssociationNotIn collectionWithEqualElements elementNotInForOccurrences firstCollection collectionNotIncluded replacementCollection nonEmptyMoreThan1Element collectionWith1TimeSubcollection oldSubCollection elementNotIn collection testNew)(#'tests - begins ends with' testsEndsWith testsEndsWithEmpty testsBeginsWith testsBeginsWithEmpty)(#'test - copy' elementToAdd)(#'tests - printing' testStoreOn testPrintElementsOn testPrintOn testPrintNameOn testPrintOnDelimiterLast testPrintOnDelimiter)(#'tests - converting' testAsSet testAsOrderedCollection testAsIdentitySet testAsBag assertNonDuplicatedContents:whenConvertedTo: assertSameContents:whenConvertedTo: assertNoDuplicates:whenConvertedTo: testAsArray)(#'tests - occurrencesOf for multipliness' testOccurrencesOfForMultipliness)(#'tests - subcollections access' testLastNElements testAllButFirstNElements testAllButFirst testAllButLast testFirstNElements testAllButLastNElements)(#testing expectedBehavior testIsLiteralSymbol testReadFrom)(#'tests - concatenation' testConcatenation testConcatenationWithEmpty)(#'tests - as set tests' testAsIdentitySetWithEqualsElements testAsSetWithEqualsElements)(#'tests - set arithmetic' testIntersectionTwoSimilarElementsInIntersection testDifference testUnionOfEmpties testIntersectionItself testIntersectionEmpty testUnion numberOfSimilarElementsInIntersection containsAll:of:andOf: testDifferenceWithSeparateCollection testIntersectionBasic)(#setup setUp)(#'tests - copy - clone' testCopyNonEmpty testCopyEmpty)(#'tests - copy' testCopyNonEmptyWithout testCopyNonEmptyWith testCopyNonEmptyWithoutAllNotIncluded testCopyReturnsIdentity testCopySameClass testCopyEmptyWithout testCopyNonEmptyWithoutAll testCopyEmptyWithoutAll testCopyEmptyWith testCopyNotSame testCopyNonEmptyWithoutNotIncluded testCopyEquals)!NBQSortCallback class removeSelector: #callType!