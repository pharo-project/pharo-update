'From Pharo3.0 of 18 March 2013 [Latest update: #30262] on 11 July 2013 at 11:18:33 am'!!TApplyingOnClassSide methodsFor: 'class hierarchy' stamp: 'SebastianTleye 7/11/2013 11:15'!addSubclass: aClass	"Do nothing."! !!TApplyingOnClassSide methodsFor: '*Ring-Core-Kernel' stamp: 'SebastianTleye 7/11/2013 11:01'!asFullRingDefinition	^ self theNonMetaClass asFullRingDefinition theMetaClass! !!TApplyingOnClassSide methodsFor: '*Ring-Core-Kernel' stamp: 'SebastianTleye 7/11/2013 11:01'!asRingDefinition	^ self theNonMetaClass asRingDefinition theMetaClass! !!TApplyingOnClassSide methodsFor: 'class hierarchy' stamp: 'SebastianTleye 7/11/2013 11:15'!addSubclass: aClass	"Do nothing."! !!TApplyingOnClassSide methodsFor: '*Ring-Core-Kernel' stamp: 'SebastianTleye 7/11/2013 11:01'!asFullRingDefinition	^ self theNonMetaClass asFullRingDefinition theMetaClass! !!TApplyingOnClassSide methodsFor: '*Ring-Core-Kernel' stamp: 'SebastianTleye 7/11/2013 11:01'!asRingDefinition	^ self theNonMetaClass asRingDefinition theMetaClass! !!Class methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theNonMetaClass	"Sent to a class or metaclass, always return the class"	^self! !!Class methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theMetaClass	"Sent to a class or metaclass, always return the metaclass"	^self class! !!Class methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theNonMetaClass	"Sent to a class or metaclass, always return the class"	^self! !!Class methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theMetaClass	"Sent to a class or metaclass, always return the metaclass"	^self class! !!ClassDescription methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theNonMetaClass	^self subclassResponsibility.! !!ClassDescription methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theMetaClass	^self subclassResponsibility.! !!ClassDescription methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theNonMetaClass	^self subclassResponsibility.! !!ClassDescription methodsFor: 'accessing parallel hierarchy' stamp: 'SebastianTleye 7/11/2013 11:10'!theMetaClass	^self subclassResponsibility.! !Metaclass removeSelector: #addSubclass:!Metaclass removeSelector: #asFullRingDefinition!Metaclass removeSelector: #asRingDefinition!ClassTrait removeSelector: #asFullRingDefinition!ClassTrait removeSelector: #asRingDefinition!!ClassTrait reorganize!('accessing parallel hierarchy' baseTrait: isBaseTrait classTrait hasClassTrait isClassTrait classTrait: baseTrait)('composition' noteNewBaseTraitCompositionApplied: uses: assertConsistantCompositionsForNew:)('testing' isSelfEvaluating)('filein/out' definition)('*Ring-Core-Kernel' asRingDefinition asFullRingDefinition)('*Fuel' fuelAccept:)(#'class hierarchy' addSubclass:)('accessing' name category)('copying' copy)('*refactoring-core' soleInstance includesBehavior:)('initialize' initializeWithBaseTrait: traitComposition:methodDict:localSelectors:organization: baseClass:traitComposition:methodDict:localSelectors:organization: initializeFrom:)('*Monticello' asMCDefinition)('compiling' compile:classified:withStamp:notifying:logSource:)!!Class reorganize!(#'class variables' allClassVarNames classVarNamed: removeClassVarNamed: addClassVarNamed: ensureClassPool classVarNames hasClassVarNamed: classVarNamed:put: usesClassVarNamed:)(#'*Monticello' asClassDefinition classDefinitions)(#'*Ring-Core-Kernel' asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackageKeys:in: asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackages: asRingDefinition asFullRingDefinition)(#viewer externalName)(#'pool variables' usesLocalPoolVarNamed: addSharedPool: sharedPoolOfVarNamed: usesPoolVarNamed: removeSharedPool: sharedPools allSharedPools sharedPools:)(#accessing traitComposition classPool name traitComposition: classPoolFrom: basicLocalSelectors basicLocalSelectors: setName: basicCategory: basicCategory classPool:)(#'fileIn/Out' shouldFileOutPools removeFromChanges fileOutSharedPoolsOn: withClassVersion: fileOutOn:moveSource:toFile: fileOutOn:moveSource:toFile:initializing: fileOut shouldFileOutPool: hasSharedPools fileOutPool:onFileStream: fileOutInitializerOn:)(#'accessing parallel hierarchy' theNonMetaClass theMetaClass)(#'class name' rename:)(#traits applyChangesOfNewTraitCompositionReplacing:)(#'self evaluating' isSelfEvaluating)(#compiling possibleVariablesFor:continuedFrom: compileAll binding compile:notifying: compileAllFrom: innerBindingOf: bindingOf: reformatAll)(#'*Spec-Builder' addSourceCode:into: addInstVarNamed:type: subclass:category:)(#'initialize-release' sharing: declare: superclass:methodDict:format:name:organization:instVarNames:classPool:sharedPools: obsolete unload removeFromSystemUnlogged name:traitComposition:methodDict:localSelectors:organization: superclass:methodDictionary:format: removeFromSystem removeFromSystem:)(#'instance variables' removeInstVarNamed: addInstVarNamed:)(#'accessing method dictionary' addSelector:withMethod:notifying: addSelectorSilently:withMethod:)(#'subclass creation' subclass: variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: weakSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableWordSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: newSubclass weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: subclass:instanceVariableNames: subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: subclass:uses: variableByteSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:)(#testing hasAbstractMethods isObsolete hasMethods isAnonymous)(#'*FuelTests' renameSilently:)(#organization category: environment category environment:)(#'accessing class hierarchy' removeSubclass: addSubclass: subclasses subclasses: subclassesDo:)(#'*Slot' subclass:layoutClass:slots:sharedVariableNames:sharedPoolNames:category:)(#'*Fuel' fuelAccept:)(#'*GroupManagerUI' prettyName)(#'*HelpSystem-Core' asHelpTopic)(#copying copy duplicateClassWithNewName:)(#'*Manifest-Core' criticTheNonMetaclassClass)(#private isValidTraitName: spaceUsed name: setName:andRegisterInCategory:environment:)(#'as yet unclassified' classBuilder)!!TApplyingOnClassSide reorganize!(#'class hierarchy' addSubclass:)('composition' noteNewBaseTraitCompositionApplied: assertConsistantCompositionsForNew:)(#'*Ring-Core-Kernel' asFullRingDefinition asRingDefinition)!